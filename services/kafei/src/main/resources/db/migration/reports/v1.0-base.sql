CREATE TABLE REPORTS.RATES(
    IP VARCHAR(15) PRIMARY KEY NOT NULL,
    REQUESTS INTEGER NOT NULL
);

CREATE TABLE REPORTS.RUN(
    RUN_ID SERIAL PRIMARY KEY NOT NULL,
    BUILD_VERSION VARCHAR(30) NOT NULL,
    CWD VARCHAR(255) NOT NULL,
    MEMORY BIGINT NOT NULL,
    SYSTEM VARCHAR(80) NOT NULL,
    SUBMIT_TIME TIMESTAMP NOT NULL,
    COMMANDLINE VARCHAR(255) NOT NULL
);

CREATE TABLE REPORTS.ARCHITECTURE(
    ARCH_NAME VARCHAR(30) PRIMARY KEY NOT NULL
);

CREATE TABLE REPORTS.COMPILER(
    COMPILER_NAME VARCHAR(30) PRIMARY KEY NOT NULL
);

CREATE TABLE REPORTS.APPLICATION(
    APP_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    ORGANIZATION VARCHAR(50) NOT NULL,
    VERSION INTEGER NOT NULL,
    CONSTRAINT APP_UQ UNIQUE (NAME, ORGANIZATION, VERSION)
);

CREATE TABLE REPORTS.PROCESSOR(
    PROC_ID SERIAL PRIMARY KEY,
    MANUFACTURER VARCHAR(20) NOT NULL,
    MODEL VARCHAR(80) NOT NULL,
    HYPERTHREADING BOOL NOT NULL,
    FPU BOOL NOT NULL,
    PAE BOOL NOT NULL,
    THREADS INTEGER NOT NULL,
    CORES INTEGER NOT NULL,
    CONSTRAINT PROC_UQ UNIQUE (MANUFACTURER, MODEL, THREADS, CORES, HYPERTHREADING, PAE, FPU)
);

CREATE TABLE REPORTS.PROCESSOR_FREQ(
    PROC_ID SERIAL REFERENCES PROCESSOR ON DELETE CASCADE,
    FREQ REAL NOT NULL,
    PRIMARY KEY (PROC_ID, FREQ)
);

CREATE TABLE REPORTS.PROCESSOR_FW(
    PROC_ID SERIAL REFERENCES PROCESSOR ON DELETE CASCADE,
    FW VARCHAR(8) NOT NULL,
    PRIMARY KEY (PROC_ID, FW)
);

CREATE TABLE REPORTS.DEVICE(
    DEV_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(80) NOT NULL,
    MOTHERBOARD VARCHAR(80) NOT NULL,
    CHASSIS VARCHAR(80) NOT NULL,
    PLATFORM INTEGER NOT NULL,
    TYPE INTEGER NOT NULL,
    DPI REAL NOT NULL,
    CONSTRAINT DEVICE_UQ UNIQUE (NAME, MOTHERBOARD, CHASSIS, TYPE, DPI)
);

CREATE TABLE REPORTS.RUN_ARCH(
    RUN_ID SERIAL REFERENCES RUN ON DELETE CASCADE,
    ARCH_NAME VARCHAR(30) REFERENCES ARCHITECTURE ON DELETE CASCADE,
    PRIMARY KEY (RUN_ID, ARCH_NAME)
);

CREATE TABLE REPORTS.RUN_COMPILER(
    RUN_ID SERIAL REFERENCES RUN ON DELETE CASCADE,
    COMPILER_NAME VARCHAR(30) REFERENCES COMPILER ON DELETE CASCADE,
    PRIMARY KEY (RUN_ID, COMPILER_NAME)
);

CREATE TABLE REPORTS.RUN_APP(
    RUN_ID SERIAL REFERENCES RUN ON DELETE CASCADE,
    APP_ID SERIAL REFERENCES APPLICATION ON DELETE CASCADE,
    PRIMARY KEY (RUN_ID, APP_ID)
);

CREATE TABLE REPORTS.RUN_PROC(
    RUN_ID SERIAL REFERENCES RUN ON DELETE CASCADE,
    PROC_ID SERIAL REFERENCES PROCESSOR ON DELETE CASCADE,
    PRIMARY KEY (RUN_ID, PROC_ID)
);

CREATE TABLE REPORTS.RUN_DEVICE(
    RUN_ID SERIAL REFERENCES RUN ON DELETE CASCADE,
    DEV_VERSION VARCHAR(50) NOT NULL,
    DEV_ID SERIAL REFERENCES DEVICE ON DELETE CASCADE,
    PRIMARY KEY (RUN_ID, DEV_VERSION, DEV_ID)
);

CREATE TABLE REPORTS.RUN_REPORT(
    RUN_ID SERIAL REFERENCES RUN ON DELETE CASCADE,
    REPORT_FORMAT VARCHAR(20) NOT NULL,
    REPORT BYTEA
);

CREATE TABLE REPORTS.RUN_EXTRAS(
    RUN_ID SERIAL REFERENCES RUN ON DELETE CASCADE,
    KEY VARCHAR(100) NOT NULL,
    VALUE BYTEA NOT NULL
);
