{"version":3,"sources":["components/Icon.tsx","components/AdminMenu.tsx","components/NavBar.tsx","control/Types.ts","control/States.ts","control/Auth.ts","control/Netcode.ts","control/Yggdrasil.ts","components/Code.tsx","components/UpdateBubble.tsx","pages/Home.tsx","pages/Examples.tsx","components/PropertyGroup.tsx","components/PropertyRow.tsx","components/BrandIcon.tsx","components/Button.tsx","components/Machine.tsx","components/Stacktrace.tsx","components/TextFileView.tsx","components/ReportView.tsx","components/Graph.tsx","components/SearchField.tsx","pages/Diagnostics.tsx","components/Footer.tsx","App.tsx","components/SemanticTab.js","serviceWorker.ts","index.tsx"],"names":["Icon","props","p","icon","rounded","foreground","background","size","spacing","style","backgroundColor","color","height","width","marginLeft","marginRight","svgData","feather","icons","__html","toSvg","undefined","className","dangerouslySetInnerHTML","borderRadius","padding","AdminMenu","src","profile","img","NavBar","desktopItems","internalLinks","concat","externalLinks","map","link","i","key","target","data-tab","defaultItem","onClick","callback","name","mobileMenu","React","useRef","mobileItems","current","classList","remove","flexGrow","login","ref","vendorToIcon","source","toLowerCase","substr","indexOf","console","log","signalToString","sig","crashFactory","base","crash","links","getLinkMatching","filter","uri","endsWith","self","delete","a","plain","fetch","then","expand","onFinish","state","machineInfo","get","stdout","stderr","stackRaw","code","endpoints","data","type","prefixedWith","auth","auths","reportView","submitTime","createRawLinkActivator","stackframes","JSON","parse","stack","createLinkActivator","machine","activateJson","val","activateRaw","reportFactory","report","result","metaFilters","item","param","nparam","system","crashId","reportId","exitCode","paramSig","reportFilter","query","length","split","queryi","value","res","authFetch","method","token","localStorage","Promise","reject","message","mode","cache","headers","body","stringify","LoginState","authState","inLinks","outLinks","this","loggedIn","username","removeItem","currToken","loggedInCycle","ScopedFetch","fetcher","fetchFunc","resource","content","json","fetchJson","catch","err","text","raw","URL","hostname","finalResource","e","ServerListener","subscriptions","listener","listeners","Paho","Client","onMessageArrived","forEach","l","payloadString","connect","timeout","onSuccess","sub","subscribe","func","push","seedTree","github","release","primaryRepo","profileImg","action","isLoggedIn","prompt","password","loggedOutCycle","net","endpointFetch","diagState","mqtt","triggerUpdate","crashes","crashStates","reverse","c","reports","reportStates","r","propagateUpdate","addJsonHandler","diagnostics","menu","externals","releases","Code","codeBlock","useEffect","highlightBlock","language","children","UpdateBubble","image","imageSrc","title","Home","yggdrasil","Examples","useState","setReleases","commit","setCommit","out","info","rel","replace","all","results","commitView","head_commit","line","margin","href","html_url","tag_name","repository","position","PropertyGroup","flexDirection","PropertyRow","BrandIcon","basedOn","simpleIcons","mask","encodeURI","svg","WebkitMask","Button","disabled","label","Machine","arch","application","build","device","extra","processor","runtime","memory","emitProperty","prop","from","args","arguments","arg","gpuInfo","manufacturer","model","driver","api","context","shadercontext","sdl2ver","windowing","deviceInfo","machineModel","machineManufacturer","runtimeInfo","kernel","kernelVersion","distro","distroVersion","compiler","compilerVersion","architecture","motherboard","motherboardVersion","dpi","toFixed","firmware","cores","threads","Math","ceil","bank","graphics","startsWith","id","toString","view","download","Stacktrace","frame","sigStart","signature","module","ip","TextFileView","ReportView","setState","loadState","setLoadState","displayState","setDisplayState","dataType","itemId","window","open","downloadUrl","tracerTemplate","Graph","chartElement","setData","chart","setChart","total","setTotal","stats","labels","selector","normalizedValues","normalizer","count","sortedValues","Map","set","v","k","newTotal","datasets","canvas","getContext","Chart","chartType","SearchField","setCurrent","tags","fontSize","placeholder","onInput","change","Diagnostics","setDiagnostics","setQuery","trace","crashList","filteredCrashes","reportList","filteredReports","onQueryUpdate","profilerUrl","profiler","loader","marginBottom","Footer","App","setYggdrasil","nav","setNav","stylesheets","$","tab","accordion","Boolean","location","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b9a36480.chunk.js","sourcesContent":["import React from 'react';\nimport feather from 'feather-icons';\n\ninterface Props {\n    icon?: string;\n    rounded?: boolean;\n    foreground?: string;\n    background?: string;\n\n    size?: number;\n    spacing?: number;\n}\n\nexport default function Icon(props: Props) {\n    const p = {\n        icon: props.icon ? props.icon : 'box',\n        rounded: props.rounded ? props.rounded : false,\n        foreground: props.foreground ? props.foreground : 'white',\n        background: props.background,\n\n        size: props.size ? props.size : 20,\n        spacing: props.spacing ? props.spacing : 4,\n    };\n\n    let out: JSX.Element;\n\n    const style: React.CSSProperties = {\n        backgroundColor: p.background,\n        color: p.foreground,\n        height: p.size,\n        width: p.size,\n    };\n\n    if(p.rounded) {\n        style.marginLeft = `${p.spacing}px`;\n        style.marginRight = `${p.spacing}px`;\n    }\n\n    const svgData = feather.icons[p.icon] \n        ? {\n            __html: feather.icons[p.icon].toSvg({\n                color: p.foreground,\n                height: p.size,\n                width: p.size,\n            })\n        } \n        : undefined;\n\n    if(p.rounded) {\n        out = (\n            <span className=\"generic-icon\" dangerouslySetInnerHTML={svgData} style={{\n                backgroundColor: p.background,\n                borderRadius: '100px',\n                color: p.foreground,\n                height: `${p.size + 8}px`,\n                marginLeft: `${p.spacing}px`,\n                marginRight: `${p.spacing}px`,\n                padding: '4px',\n                width: `${p.size + 8}px`,\n            }}>\n            </span>\n        );\n    } else {\n        out = (\n            <span className=\"generic-icon\" dangerouslySetInnerHTML={svgData}>\n            </span>\n        );\n    }\n\n    return out;\n}\n","import React from 'react';\nimport { LoginState } from '../control/Auth';\nimport { GithubProfile } from '../control/Types';\nimport '../styles/AdminMenu.scss';\n\ninterface Props {\n    profile?: GithubProfile;\n    login?: LoginState;\n};\n\nexport function AdminMenu (props: Props) {\n    return (\n        <div>\n            <img src={props.profile?.img} className=\"ui tiny circular image\" />\n        </div>\n    );\n}\n","import React from 'react';\nimport '../styles/NavBar.scss';\nimport { GithubProfile, NavLink } from \"../control/Types\";\nimport Icon from './Icon';\nimport { AdminMenu } from './AdminMenu';\nimport { LoginState } from '../control/Auth';\n\ninterface Props {\n    defaultItem: string;\n    callback: (navTarget: string) => void;\n    internalLinks: NavLink[];\n    externalLinks: NavLink[];\n\n    profile?: GithubProfile;\n    login?: LoginState;\n};\n\nexport default function NavBar (props: Props) {\n    const desktopItems = props.internalLinks\n        .concat(props.externalLinks)\n        .map((link, i) => (\n        <a \n            key={link.target}\n            data-tab={link.target} \n            className={`ui item${link.target === props.defaultItem ? ' active' : ''}`}\n            onClick={() => props.callback(link.target)}\n        >\n            <Icon icon={link.icon} size={i === 0 ? 32 : 16} />\n            {i !== 0 && (<h3>{link.name}</h3>)}\n        </a>\n    ));\n\n    const mobileMenu = React.useRef<HTMLDivElement>(null);\n    const closeMobileMenu = () => \n        mobileMenu.current!.classList.remove('active');\n    const mobileItems = props.internalLinks\n        .concat(props.externalLinks)\n        .map(link => (\n        <a \n            key={link.target}\n            className={`ui item${link.target === props.defaultItem ? ' active' : ''}`}\n            data-tab={link.target}\n            onClick={() => { closeMobileMenu(); props.callback(link.target); }}\n        >\n            <Icon icon={link.icon} />\n            <b>{link.name}</b>\n        </a>\n    ));\n\n    return (\n        <>\n            <div className=\"ui inverted menu desktop navbar\">\n                {desktopItems}\n                <span style={{flexGrow: 1}}></span>\n                <AdminMenu profile={props.profile} login={props.login} />\n            </div>\n            <div className=\"ui inverted menu mobile navbar vertcal fluid\">\n                <div ref={mobileMenu}>\n                    {mobileItems}\n                </div>\n            </div>\n        </>\n    );\n}\n","export type Color =\n    'green'\n    | 'red'\n    | 'blue'\n    | 'white'\n    | 'black'\n    | 'yellow'\n    ;\n\nexport type HTTPMethod =\n      'GET'\n    | 'POST'\n    | 'DELETE'\n    ;\n\nexport type HwVendorIcon =\n    | 'nvidia'\n    | 'qualcomm'\n    | 'amd'\n    | 'intel'\n    | 'google'\n    | 'apple'\n    | 'samsung'\n    ;\nexport type ConsoleIcon =\n    | 'nintendogamecube'\n    | 'wii'\n    | 'wiiu'\n    ;\nexport type OSIcon = \n    | 'linux'\n    | 'windows'\n    | 'android'\n    | 'macos'\n    | 'webassembly'\n    ;\nexport type BrowserIcon =\n    | 'microsoftedge'\n    | 'googlechrome'\n    | 'mozillafirefox'\n    | 'safari'\n    | 'internetexplorer'\n    ;\nexport type VendorIcon = HwVendorIcon | ConsoleIcon | OSIcon | BrowserIcon;\n\nexport type LoadState =\n    | 'loaded'\n    | 'loading'\n    | 'unloaded';\n\nexport type GithubProfile = {\n    username: string;\n    link: string;\n    img: string;\n};\n\nexport type GithubRepository = {\n    link: string;\n};\n\nexport type GithubRelease = {\n    release?: {\n        html_url: string;\n        tag_name: string;\n    };\n    repository?: {\n        /* Repository metadata */\n        name: string;\n        created_at: string;\n        description: string;\n        full_name: string;\n        language: string;\n        license?: {\n            key: string;\n            name: string;\n            node_id: string;\n            spdx_id: string;\n            url: string;\n        }\n\n        has_issues: boolean;\n        open_issues: number;\n\n        has_downloads: boolean;\n\n\n        has_projects: boolean;\n\n        /* Associated resources */\n        archive_url: string;\n        clone_url: string;\n        commits_url: string;\n\n        languages_url: string;\n        downloads_url: string;\n\n        /* Git metadata */\n        default_branch: string;\n    };\n};\n\nexport type GithubCommit = {\n    head_commit?: {\n        timestamp: string;\n        id: string;\n        message: string;\n    };\n    ref: string;\n};\n\nexport type EndpointConfig = {\n    data: string;\n    profiler: string;\n    crash: string;\n    trace: string;\n};\n\nexport type NavLink = {\n    name: string;\n    target: string;\n    icon: string;\n};\n\nexport type MenuLink = {\n    text: string;\n    icon: string;\n    color: Color;\n    action: () => Promise<void>;\n};\n\nexport type LinkData = {\n    uri: string;\n    method?: HTTPMethod;\n};\n\nexport type RESTMessage<T> = {\n    data?: T;\n    message?: string;\n    code?: number;\n    links?: LinkData[];\n};\n\nexport type MachineData = {\n    application: {\n        name: string;\n        organization: string;\n        version: number;\n    };\n    build: {\n        version: string;\n        architecture: string;\n        buildMode?: string;\n        target?: string;\n        compiler?: string;\n        compilerVersion?: string;\n    };\n    device: {\n        type: number;\n        name: string;\n\n        platform: number;\n        dpi: number;\n\n        machineManufacturer?: string;\n        machineModel?: string;\n\n        motherboard?: string;\n        motherboardVersion?: string;\n    };\n    runtime: {\n        cwd?: string;\n        arguments?: string[];\n\n        system: string;\n        architecture?: string;\n\n        distro?: string;\n        distroVersion?: string;\n\n        kernel?: string;\n        kernelVersion?: string;\n    };\n    processor: {\n        manufacturer: string;\n        model: string;\n        firmware: string;\n        cores: number;\n        threads: number;\n\n        frequencies: number[];\n\n        hyperthreading: boolean;\n        fpu: boolean;\n    };\n    memory?: {\n        bank: number;\n        virtual?: {\n            available: number;\n            total: number;\n        }\n    };\n    extra: any;\n};\n\nexport type CrashReportBase = {\n    submitTime: Date;\n};\n\nexport type CrashData = CrashReportBase & {\n    crashId: number;\n    exitCode: number;\n};\n\nexport type ReportData = CrashReportBase & {\n    reportId: number;\n    system: string;\n    buildVersion: string;\n};\n\nexport type Stackframe = {\n    frame: string;\n    ip: string;\n};\n\nexport type Statistics = {\n    count: number;\n    item?: any;\n    architecture?: string;\n    system?: string;\n};\n\nexport type FilterCategory = 'arch' | 'os' | 'gpu' | 'device' | 'cpu';\nexport type Filter = {\n    category: FilterCategory;\n    value: string;\n};\n\nexport const vendorToIcon = (source?: string) => {\n    if(!source)\n        return undefined;\n\n    source = source.toLowerCase();\n\n    // Hardware manufacturers\n    if(source.substr(0, 6) === \"nvidia\")\n        return \"nvidia\";\n    if(source.substr(0, 8) === \"qualcomm\")\n        return \"qualcomm\";\n    if(source.substr(0, 3) === \"ati\" || source.substr(0, 3) === \"amd\")\n        return \"amd\";\n    if(source.substr(0, 5) === \"intel\")\n        return \"intel\";\n    if(source.substr(0, 6) === \"google\")\n        return \"google\";\n    if(source.substr(0, 5) === \"apple\" || source.substr(0, 5) === \"macos\" || source.substr(0, 3) === \"ios\" || source.substr(0, 8) === 'mac os x')\n        return \"apple\";\n    if(source.substr(0, 7) === \"samsung\" || source.substr(0, 4) === \"smdk\")\n        return \"samsung\";\n\n    // Operating systems\n    if(source.substr(0, 5) === \"linux\")\n        return \"linux\";\n    if(source.substr(0, 7) === \"windows\")\n        return \"windows\";\n    if(source.substr(0, 7) === \"android\")\n        return \"android\";\n\n    // Consoles\n    if(source.indexOf(\"gamecube\") !== -1)\n        return \"nintendogamecube\";\n    if(source.indexOf(\"wii u\") !== -1)\n        return \"wiiu\";\n    if(source.indexOf(\"wii\") !== -1)\n        return \"wii\";\n\n    // WebAsm\n    if(source.indexOf(\"emscripten\") !== -1 || source.indexOf(\"webasm\") !== -1)\n        return \"webassembly\";\n\n    // Browsers\n    if(source.indexOf(\"edge\") !== -1)\n        return \"microsoftedge\";\n    if(source.indexOf(\"chrom\") !== -1)\n        return \"googlechrome\";\n    if(source.indexOf(\"firefox\") !== -1)\n        return \"mozillafirefox\";\n    if(source.indexOf(\"safari\") !== -1)\n        return \"safari\";\n    if(source.indexOf(\"msie\") !== -1 || source.indexOf(\"trident\") !== -1)\n    {\n        console.log(\"What? How did you do that?\");\n        return \"internetexplorer\";\n    }\n\n    return source;\n};\n\nexport const mapArchToReadable = (arch: string) => {\n    arch = arch.toLowerCase();\n\n    if(arch === 'aarch64')\n        return 'ARMv8-64';\n    \n    return arch;\n};\n\nexport const signalToString = (sig: number) => {\n    if(sig === 15)\n        return 'SIGTERM';\n    if(sig === 11)\n        return 'SIGSEGV';\n    if(sig === 9)\n        return 'SIGKILL';\n    if(sig === 8)\n        return 'SIGFPE';\n    if(sig === 7)\n        return 'SIGBUS';\n    if(sig === 6)\n        return 'SIGABRT';\n    if(sig === 5)\n        return 'SIGTRAP';\n    if(sig === 4)\n        return 'SIGILL';\n    if(sig === 1)\n        return 'SIGHUP';\n\n    return '' + sig;\n};\n\nexport const filterLog = (log: string) => {\n\n};","import {\n    EndpointConfig,\n    RESTMessage,\n    CrashData,\n    ReportData,\n    MachineData,\n    Stackframe,\n    LinkData,\n    signalToString,\n} from './Types';\n\nimport type {\n    ScopedFetch,\n    NetValue,\n    ServerListener,\n} from './Netcode';\n\nimport type {\n    AuthState,\n} from './Auth';\nimport { ReleaseInfo } from './Yggdrasil';\n\nexport type NetState = {\n    plain: ScopedFetch;\n    auth: ScopedFetch;\n};\n\nexport type ReportViewState = {\n    submitTime: Date;\n    machine?: MachineData;\n};\n\nexport type CrashReportBaseState = NetState & {\n    delete: () => Promise<void>;\n    expand: (onFinish: () => void) => void;\n    trigger?: () => void,\n\n    endpoints: EndpointConfig;\n    auths: AuthState;\n    state: 'unloaded' | 'loading' | 'loaded';\n    links: LinkData[],\n\n    machineInfo: NetValue<MachineData>;\n    reportView: ReportViewState;\n};\n\nexport type CrashState = CrashReportBaseState & {\n    data: CrashData;\n    type: 'Crash',\n\n    stdout: NetValue<string>;\n    stderr: NetValue<string>;\n    stackRaw: NetValue<string>;\n    stack?: Stackframe[];\n    logError?: string;\n    logException?: string;\n};\n\nexport type ReportState = CrashReportBaseState & {\n    data: ReportData;\n    type: 'Report',\n};\n\nexport type ReportOrCrashState = ReportState | CrashState;\n\nexport let crashFactory = (\n        base: DiagnosticState, \n        crash: RESTMessage<CrashData>,\n        i: number\n) => {\n\n    if(!crash.links)\n        return undefined;\n\n    const getLinkMatching = (sig: string) =>\n        crash.links!.filter(link => link.uri.endsWith('/' + sig))[0];\n\n    const self: CrashState = {\n        delete: async () => {\n            return self.plain.fetch('', 'DELETE').then();\n        },\n        expand: async (onFinish) => {\n            if(self.state !== 'unloaded')\n                return;\n            \n            self.state = 'loading';\n\n            await self.machineInfo.get!();\n            await self.stdout.get!();\n            await self.stderr.get!();\n            await self.stackRaw.get!();\n\n            onFinish();\n        },\n\n        stdout: {\n            code: 0,\n        },\n        stderr: {\n            code: 0,\n        },\n        stackRaw: {\n            code: 0,\n        },\n        machineInfo: {\n            code: 0,\n        },\n\n        endpoints: base.endpoints,\n        links: crash.links,\n        state: 'unloaded',\n        data: crash.data!,\n        type: 'Crash',\n        plain: base.plain.prefixedWith(crash.links[0]),\n        auth: base.auth.prefixedWith(crash.links[0]),\n        auths: base.auths,\n        reportView: {\n            submitTime: crash.data!.submitTime,\n        },\n    };\n\n    function createLinkActivator<T>(\n        self: NetValue<T>,\n        link: string\n    ) {\n        return () =>\n            base.plain.activateJson<T>(getLinkMatching(link))\n                .then(val => {\n                    self.code = 200;\n                    if(self.code === 200) {\n                        self.data = val;\n                        return self.data;\n                    }\n                });\n    }\n    function createRawLinkActivator(\n        self: NetValue<string>,\n        link: string\n    ) {\n        return () => \n            base.plain.activateRaw(getLinkMatching(link))\n                .then((val) => {\n                    self.code = 200;\n                    if(self.code === 200 && val) {\n                        self.data = val;\n                    }\n                });\n    }\n\n    self.stdout.get = createRawLinkActivator(self.stdout, 'stdout');\n    self.stderr.get = createRawLinkActivator(self.stderr, 'stderr');\n    \n    self.stackRaw.get = async () => { \n        await createRawLinkActivator(self.stackRaw, 'stacktrace')();\n\n        if(self.stackRaw.code !== 200)\n            return;\n\n        let stackframes: Stackframe[] = [];\n        try {\n            stackframes = JSON.parse(self.stackRaw.data);\n        } catch {\n            try {\n                stackframes = JSON.parse(self.stackRaw.data + '{}]');\n            } catch {}\n        }\n        self.stack = stackframes;\n    };\n\n    self.machineInfo.get = async () => {\n        await createLinkActivator<MachineData>(self.machineInfo, 'machine')()\n            .then((machine) => {\n                self.reportView = {\n                    machine: machine,\n                    submitTime: self.reportView.submitTime,\n                };\n            });\n    };\n\n    return self;\n};\n\nexport let reportFactory = (\n    base: DiagnosticState,\n    report: RESTMessage<ReportData>,\n    i: number\n): ReportState | undefined => {\n\n    if(!report.links)\n        return undefined;\n\n    const self: ReportState = {\n        data: report.data!,\n        type: 'Report',\n        links: report.links,\n        state: 'unloaded',\n        endpoints: base.endpoints,\n\n        delete: async () => {\n            await self.auth.fetch('', 'DELETE');\n        },\n        expand: async (onFinish) => {\n            await self.machineInfo.get!();\n\n            onFinish();\n        },\n\n        machineInfo: {\n            code: 0\n        },\n\n        plain: base.plain.prefixedWith(report.links[0]),\n        auth: base.auth.prefixedWith(report.links[0]),\n        auths: base.auths,\n\n        reportView: {\n            submitTime: report.data!.submitTime,\n        }\n    };\n\n    self.machineInfo.get = async () => {\n        const result = await self.plain.fetch<MachineData>('');\n\n        self.machineInfo.code = 200;\n        if(self.machineInfo.code === 200 && result.data) {\n            self.machineInfo.data = result.data;\n            self.reportView.machine = result.data;\n        }\n    };\n\n    return self;\n};\n\nexport type DiagnosticData = {\n    crashes: CrashState[];\n    reports: ReportState[];\n\n    filteredCrashes?: CrashState[];\n    filteredReports?: ReportState[];\n};\n\nexport type DiagnosticState = NetState & {\n    endpoints: EndpointConfig;\n    auths: AuthState;\n\n    mqtt: ServerListener;\n\n    triggerUpdate: () => Promise<void>;\n    propagateUpdate?: (data: DiagnosticData) => void;\n};\n\nconst metaFilters = [\n    {\n        key: 'system',\n        filter: (item: ReportOrCrashState, param?: string) => {\n            if(item.type !== 'Report' || !param)\n                return false;\n            const nparam = param.toLowerCase();\n            return item.data.system.toLowerCase().indexOf(nparam) !== -1;\n        },\n    },\n    {\n        key: 'id',\n        filter: (item: ReportOrCrashState, param?: string) => {\n            if(!param)\n                return false;\n            \n            if(item.type === 'Crash')\n                return item.data.crashId + '' === param;\n            else if(item.type === 'Report')\n                return item.data.reportId + '' === param;\n        },\n    },\n    {\n        key: 'code',\n        filter: (item: ReportOrCrashState, param?: string) => {\n            if(item.type !== 'Crash' || !param)\n                return false;\n\n            const sig = signalToString(item.data.exitCode).toLowerCase();\n            const paramSig = param.toLowerCase();\n\n            return item.data.exitCode + '' === param || sig === paramSig;\n        },\n    },\n];\n\nexport const reportFilter = (query?: string) => (item: ReportOrCrashState) => {\n    if(!query || query.length === 0) {\n        return true;\n    }\n\n    if(item.type === 'Report') {\n        if(metaFilters[0].filter(item, query))\n            return true;\n    }\n\n    return query.split(' ').map(queryi => {\n        if(item.type === 'Crash') {\n            const [key, value] = query.split(':');\n            return metaFilters\n                .map(filter => \n                    filter.key == key && filter.filter(item, value))\n                .filter(res => res)\n                .length > 0;\n        } else if(item.type === 'Report') {\n            const [key, value] = query.split(':');\n            return metaFilters\n                .map(filter =>\n                        filter.key == key && filter.filter(item, value))\n                .filter(res => res)\n                .length > 0;\n        }\n    }).filter(res => res).length === query.split(' ').length;\n};\n\nexport type ExamplesState = {\n    info: ReleaseInfo;\n    net: NetState;\n};","import type { HTTPMethod, EndpointConfig, MenuLink } from './Types';\n\nexport type AuthState = {\n    loggedIn: boolean;\n    username?: string;\n    profileImg?: string;\n    fetch: (source: string, method?: HTTPMethod, data?: any) => Promise<Response>;\n};\n\nexport type AuthToken = {\n    username?: string;\n    token?: string;\n};\n\nexport type AuthVerification = {\n\n};\n\nexport async function authFetch(\n    endpoints: EndpointConfig,\n    source: string,\n    method?: HTTPMethod,\n    data?: string) {\n    const token: AuthToken = JSON.parse(localStorage['Kafei-Api-Token']);\n\n    if(!token) {\n        const message = 'no authorization token available';\n        const code    = 401;\n        return Promise.reject({message, code});\n    }\n\n    return await fetch(endpoints.data + source, {\n        method: method ? method : 'GET',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + token.token,\n        },\n        body: data ? JSON.stringify(data) : undefined,\n    });\n}\n\nexport class LoginState {\n    constructor(\n        authState: AuthState,\n        inLinks: MenuLink[],\n        outLinks: MenuLink[]) {\n        this.authState = authState;\n        this.inLinks = inLinks;\n        this.outLinks = outLinks;\n        this.links = outLinks;\n    }\n\n    authState: AuthState;\n    inLinks: MenuLink[];\n    outLinks: MenuLink[];\n    links?: MenuLink[];\n\n    loggedInCycle(token?: AuthToken) {\n        if(!token)\n            return;\n\n        localStorage['Kafei-Api-Token'] = JSON.stringify(token);\n        this.authState.loggedIn = true;\n        this.authState.username = token.username;\n        this.links = this.inLinks;\n    }\n    loggedOutCycle() {\n        localStorage.removeItem('Kafei-Api-Token');\n        this.authState.loggedIn = false;\n        this.authState.username = undefined;\n        this.links = this.outLinks;\n    }\n\n    async isLoggedIn(endpoints: EndpointConfig) {\n        try {\n            let currToken = JSON.parse(localStorage['Kafei-Api-Token']);\n\n            if(currToken) {\n                const isLoggedIn = await authFetch(\n                    endpoints,\n                    '/v2/users/checkAuthenticate');\n                \n                if(isLoggedIn)\n                {\n                    this.loggedInCycle(currToken);\n                    return true;\n                }\n            }\n        } catch(err) {}\n        return false;\n    }\n};\n","import Paho from 'paho-mqtt';\n\nimport type {\n    HTTPMethod,\n    RESTMessage,\n    LinkData,\n    EndpointConfig \n} from './Types';\n\nexport type NetValue<T> = {\n    get?: () => Promise<void>;\n} & ({\n    code: 0 | 404 | 500;\n} | {\n    code: 200;\n    data: T;\n});\n\ntype FetchFunction =  (\n    rsc: string,\n    method?: HTTPMethod,\n    data?: string) => Promise<Response>;\n\nexport class ScopedFetch {\n    constructor(fetcher: FetchFunction) {\n        this.fetchFunc = fetcher;\n    }\n\n    fetchFunc: FetchFunction;\n\n    async fetchJson<T>(resource: string, method?: HTTPMethod, data?: string) {\n        return this.fetchFunc(resource, method, data)\n            .then((content) => content.json())\n            .then(content => content as T);\n    }\n    async fetch<T>(resource: string, method?: HTTPMethod, data?: string) {\n        return this.fetchJson<T>(resource, method, data)\n            .then((content) => content as RESTMessage<T>)\n            .catch((err) => err as RESTMessage<void>);\n    }\n\n    async raw(resource: string) {\n        return this.fetchFunc(resource)\n            .then((content) => content.text())\n            .catch((err) => console.log(err));\n    }\n\n    async activate<T>(link: LinkData, data?: string) {\n        return this.fetch<T>(link.uri, link.method, data);\n    }\n    async activateJson<T>(link: LinkData, data?: string) {\n        return this.fetchJson<T>(link.uri, link.method, data);\n    }\n    async activateRaw(link: LinkData, data?: string) {\n        return this.raw(link.uri);\n    }\n\n    prefixedWith(link: LinkData) {\n        return new ScopedFetch((resource, method, data) => \n            this.fetchFunc(link.uri + '/' + resource, method, data));\n    }\n};\n\nexport async function endpointFetch(\n    endpoints: EndpointConfig,\n    resource: string,\n    method?: HTTPMethod,\n    data?: string) {\n    let finalResource: string | undefined;\n    try {\n        const parse = new URL(resource);\n        console.log(resource, parse.hostname);\n        finalResource = resource;\n    } catch (e) {\n        finalResource = endpoints.data + resource;\n    }\n\n    return fetch(finalResource, {\n        method: method ? method : 'GET',\n        // mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: data ? JSON.stringify(data) : undefined,\n    });\n}\n\nexport type MqttListener = (message: string) => void;\nexport type MqttJsonListener<T> = (message: T) => void;\n\nexport class ServerListener {\n    constructor(subscriptions: string[]) {\n        this.listener = new Paho.Client(\n            \"wss://birchy.dev:8083/\",\n            \"kafei.dev\");\n\n        this.listener.onMessageArrived = (message) =>\n            this.listeners.forEach(l => l(JSON.parse(message.payloadString)));\n        \n        this.listener.connect({\n            timeout: 3,\n            onSuccess: () => \n                subscriptions.forEach(sub =>\n                    this.listener.subscribe(sub))\n                ,\n        });\n    }\n\n    addHandler(func: MqttListener) {\n        this.listeners.push(func);\n    }\n    addJsonHandler<T>(func: MqttJsonListener<T>) {\n        this.listeners.push((message) => {\n            func(JSON.parse(message) as T);\n        });\n    }\n\n    listener: Paho.Client;\n    listeners: MqttListener[] = [];\n};\n","import {\n    DiagnosticState,\n    NetState,\n    crashFactory, \n    CrashState,\n    ReportState, reportFactory\n} from \"./States\";\nimport type {\n    GithubProfile,\n    GithubRelease,\n    EndpointConfig,\n    NavLink,\n    RESTMessage,\n    HTTPMethod,\n    GithubCommit,\n    CrashData,\n    ReportData,\n} from \"./Types\";\nimport type { AuthToken } from \"./Auth\";\nimport { LoginState } from './Auth';\nimport { ScopedFetch, endpointFetch, ServerListener } from \"./Netcode\";\n\nexport type ReleaseInfo = {\n    releases: string[];\n    primaryRepo: string;\n};\n\nexport type Yggdrasil = {\n    /* Internal data */\n    endpoints: EndpointConfig;\n    login: LoginState;\n\n    /* UI Data */\n    diagnostics: DiagnosticState;\n    profile: GithubProfile;\n    menu: {\n        links: NavLink[];\n        externals: NavLink[];\n    };\n    releases: ReleaseInfo;\n};\n\nexport const seedTree = (\n    endpoints: EndpointConfig,\n    github: GithubProfile,\n    release: string[],\n    primaryRepo: string,\n) => {\n    let navLinks: NavLink[] = [\n        {name: \"Home\", target: \"nav::home\", icon: \"home\"},\n        {name: \"Examples\", target: \"nav::examples\", icon: \"package\"},\n        {name: \"Diagnostics\", target: \"nav::diag\", icon: \"activity\"}\n    ];\n    let extLinks: NavLink[] = [\n    ];\n    let login: LoginState = new LoginState(\n        {\n            loggedIn: false,\n            username: undefined,\n            profileImg: undefined,\n            fetch: async (source: string, method?: HTTPMethod, data?: any) => {\n                const token: AuthToken = JSON.parse(localStorage['Kafei-Api-Token']);\n\n                if(!token)\n                    return;\n\n                return await fetch(endpoints.data + source, {\n                        method: method ? method : 'GET',\n                        cache: 'no-cache',\n                        headers: {\n                            'Accept': 'application/json',\n                            'Authorization': 'Bearer ' + token.token,\n                            'Content-Type': 'application/json',\n                        },\n                        body: data ? JSON.stringify(data) : undefined,\n                    }).then((content) => {\n                        return content.json();\n                    }).then((content: RESTMessage<any>) => {\n                        if(content.data)\n                            return content.data;\n                        else\n                            return content;\n                    }).catch((err) => {\n                        console.log(err);\n                    });\n            },\n        },\n        [\n            {\n                text: \"Sign in\",\n                icon: \"log-in\",\n                color: \"green\",\n                action: async () => \n                {\n                    if(await login.isLoggedIn(endpoints))\n                        return;\n                    const token: AuthToken | undefined = \n                        await login.authState.fetch('/v2/users/authenticate', 'POST', {\n                            username: prompt('Username'),\n                            password: prompt('Password')\n                        })\n                        .then(content => content as AuthToken);\n                    if(!token)\n                        return;\n                    login.loggedInCycle(token);\n                }\n            },\n            {\n                text: \"Register\",\n                icon: \"edit-2\",\n                color: \"blue\",\n                action: async () => {}\n            }\n        ],\n        [\n            {\n                text: \"Sign out\",\n                icon: \"log-out\",\n                color: \"red\",\n                action: async () => login.loggedOutCycle()\n            }\n        ],\n    );\n    login.links = login.outLinks;\n\n    let net: NetState = {\n        plain: new ScopedFetch(\n            (resource: string, method?: HTTPMethod, data?: any) => \n                endpointFetch(endpoints, resource, method, data)),\n        auth: new ScopedFetch(login.authState.fetch),\n    };\n\n    const diagState: DiagnosticState = {\n        endpoints,\n        auths: login.authState,\n        auth: net.auth,\n        plain: net.plain,\n        mqtt: new ServerListener(['public/diagnostics/#']),\n        triggerUpdate: async () => {\n            let crashStates: CrashState[] | undefined;\n            let reportStates: ReportState[] | undefined;\n\n            const crashes = await net.plain.fetch<RESTMessage<CrashData>[]>(\n                '/v2/crash');\n            if(crashes.data)\n                crashStates = \n                    crashes.data.reverse().map((c, i) =>         \n                        crashFactory(diagState, c, i)!);\n            const reports = await net.plain.fetch<RESTMessage<ReportData>[]>(\n                '/v2/reports');\n            if(reports.data)\n                reportStates = reports.data.reverse().map((r, i) =>\n                    reportFactory(diagState, r, i)!);\n\n            diagState.propagateUpdate && diagState.propagateUpdate({\n                crashes: crashStates ? crashStates : [],\n                reports: reportStates ? reportStates : [],\n            });\n        },\n    };\n\n    diagState.mqtt.addJsonHandler(async () => {\n        console.log('got MQTT message');\n        await diagState.triggerUpdate();\n    });\n\n    const out: Yggdrasil = {\n        endpoints: endpoints,\n        login: login,\n\n        diagnostics: diagState,\n        profile: github,\n        menu: {\n            links: navLinks,\n            externals: extLinks,\n        },\n        releases: {\n            releases: release,\n            primaryRepo,\n        }\n    };\n\n    return out;\n};\n","import React, { useEffect, useRef } from 'react';\nimport '../styles/Code.scss';\nimport { highlightBlock } from 'highlight.js';\n\ninterface Props {\n    children: string | string[];\n    language: string;\n}\n\nexport default function Code(props: Props) {\n    const codeBlock = useRef<HTMLElement>(null);\n\n    useEffect(() => highlightBlock(codeBlock.current!), []);\n\n    return (\n        <div className='code-block'>\n            <pre>\n                <code ref={codeBlock} className={`${props.language}`}>\n                    {props.children}\n                </code>\n            </pre>\n        </div>\n    );\n}\n","import React from 'react';\nimport '../styles/UpdateBubble.scss';\n\ninterface Props {\n    title: string | HTMLElement | JSX.Element;\n    content?: string | HTMLElement | JSX.Element;\n    image?: HTMLElement | JSX.Element;\n    imageSrc?: string;\n\n    action?: () => void;\n};\n\nexport default function UpdateBubble(props: Props) {\n    return (\n        <div className=\"update-bubble\">\n            <div className=\"image\" onClick={props.action}>\n                {props.image}\n                {props.imageSrc && (<img src={props.imageSrc}/>)}\n            </div>\n            <div className=\"content\">\n                <div className=\"title\">\n                    {props.title}\n                </div>\n                {props.content}\n            </div>\n        </div>\n    );\n};","import React from 'react';\nimport Code from '../components/Code';\nimport UpdateBubble from '../components/UpdateBubble';\nimport { Yggdrasil } from '../control/Yggdrasil';\n\ninterface Props {\n    yggdrasil: Yggdrasil;\n}\n\nexport default function Home(props: Props) {\n    const profile = props.yggdrasil.profile;\n\n    return (\n        <div data-tab='nav::home' className='ui inverted text tab segment active'>\n            <UpdateBubble \n                title={(<p><b>username</b> {profile.username}</p>)}\n                content={(<p>All the code is on Github</p>)}\n                image={(<img src={profile.img}/>)}\n            />\n\n            <h2 className=\"ui header\">Getting started</h2>\n\n            <p>\n                Get started by cloning the source code\n            </p>\n\n            <Code language=\"bash\">\n                git clone https://github.com/hbirchtree/coffeecutie.git\n            </Code>\n\n            <p>\n                If all your compilers and CMake are in order, you should be able to use the quick-build option as such\n            </p>\n\n            <Code language=\"bash\">\n                BUILD_MODE=bare ./cb quick-build [ubuntu.amd64, fedora.amd64, osx, ios.x86_64]\n            </Code>\n\n            <p>\n                Additionally, if you don't want to set up compilers and etc., and you have Docker installed, you can go ahead with\n            </p>\n\n            <Code language=\"bash\">\n                ./cb quick-build [ubuntu.amd64, fedora.amd64]\n            </Code>\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport UpdateBubble from '../components/UpdateBubble';\nimport { ExamplesState } from '../control/States';\nimport { GithubCommit, GithubRelease, LoadState } from '../control/Types';\n\ninterface Props {\n    releases: ExamplesState;\n}\n\nexport default function Examples(props: Props) {\n    const [releases, setReleases] = useState<{ releases?: GithubRelease[] , state: LoadState}>({state: 'unloaded'});\n    const [commit, setCommit] = useState<{ commit?: GithubCommit, state: LoadState }>({state: 'unloaded'});\n\n    if (releases.state === 'unloaded')\n    {\n        const net = props.releases.net.plain;\n\n        (async () => {\n            const out = props.releases.info.releases.map(rel =>\n                net.fetch<GithubRelease>(\n                    \"/github/latestRelease/\" + rel.replace('/', '_')));\n            Promise.all(out).then(out => {\n                const results = out.map(\n                        rel => rel.data ? rel.data : undefined)\n                    .filter(\n                        rel => rel) as GithubRelease[];\n                console.log(out);\n                setReleases({releases: results, state: 'loaded'});\n            });\n        })();\n        setReleases({state: 'loading'});\n    }\n    if (commit.state == 'unloaded')\n    {\n        const net = props.releases.net.plain;\n\n        (async () => {\n            const out = await net.fetch<GithubCommit>(\n                \"/github/updateInfo/\" + props.releases.info.primaryRepo.replace('/', '_'));\n            \n            if (out && out.data)\n                setCommit({state: 'loaded', commit: out.data});\n        })();\n    }\n\n    const commitView = commit.state === 'loaded' && commit.commit && commit.commit.head_commit\n        ? (<UpdateBubble \n            title={props.releases.info.primaryRepo}\n        content={(<>\n            {commit.commit.head_commit?.message.split('\\n').map(\n                line => (<p style={{margin: \"0\"}}>{line}</p>))}\n            </>)}\n        />)\n        : (<div className=\"ui active loader\" style={{height: \"2em\"}}></div>);\n\n    const content = releases.state === 'loaded' && releases.releases\n        ? releases.releases.map((rel, i) => {\n            const link = (<a key={i} href={rel.release?.html_url}>\n                    {rel.release?.tag_name}\n                </a>);\n            return (<div className=\"row\">\n                <div className=\"column\"><p>{rel.repository?.name}</p></div>\n                <div className=\"column\">{link}</div>\n            </div>);\n        })\n        : (<div className=\"ui active loader\" style={{height: \"2em\"}}>\n        </div>);\n\n    return (\n        <div\n            data-tab='nav::examples' \n            className='ui inverted text tab segment'\n        >\n            <div style={{position: 'relative'}}>\n                {commitView}\n            </div>\n            <p>\n                Every release generates downloadable binaries for Linux and macOS platforms, found here:\n            </p>\n            <div className=\"ui two column grid\" style={{\n                position: 'relative'}}\n            >\n                <div className=\"row\">\n                    <div className=\"column\"><b>Repository</b></div>\n                    <div className=\"column\"><b>Release</b></div>\n                </div>\n                {content}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport Icon from './Icon';\nimport '../styles/PropertyGroup.scss';\n\ninterface Props {\n    icon: string;\n    title: string;\n    children?: JSX.Element[] | JSX.Element | undefined;\n}\n\nexport default function PropertyGroup(props: Props) {\n    return (\n        <div\n            className=\"ui container inverted property-group\"\n            style={{flexDirection: 'column'}}\n        >\n            <h4 className=\"ui horizontal divider header inverted\">\n                <span className=\"flex-centered\">\n                    <Icon icon={props.icon} />\n                    {props.title}\n                </span>\n            </h4>\n            <div className=\"ui divided internally called centered grid inverted\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\ninterface Props {\n    name: string;\n    children?: JSX.Element | JSX.Element[] | (string | undefined) | (string | undefined)[];\n}\n\nexport default function PropertyRow(props: Props) {\n    return (\n        <div className=\"ui row inverted property-row\">\n            <div className=\"ui right aligned four wide column header inverted\">\n                <h5 className=\"ui header inverted\">\n                    {props.name}\n                </h5>\n            </div>\n            <div className=\"ui ten wide column inverted flex-row\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Color, vendorToIcon } from '../control/Types';\nimport Icon from './Icon';\nimport simpleIcons from 'simple-icons';\n\ninterface Props {\n    basedOn?: string;\n    icon?: string;\n    size?: number;\n    color?: Color;\n};\n\nexport function BrandIcon (props: Props) {\n    const p = {\n        icon: props.icon ? props.icon : vendorToIcon(props.basedOn),\n        size: props.size ? props.size : 24,\n        color: props.color ? props.color : 'white',\n    };\n\n    const icon = p.icon ? simpleIcons.get(p.icon) : undefined;\n\n    if(!icon) {\n        return (\n            <Icon size={p.size} icon='box'/>\n        );\n    } else {\n        return (\n            <div className=\"brand-icon\" style={{\n                backgroundColor: p.color,\n                mask: `url(data:image/svg+xml,${encodeURI(icon.svg)})`,\n                WebkitMask: `url(data:image/svg+xml,${encodeURI(icon.svg)})`,\n                height: `${p.size}px`,\n                width: `${p.size}px`,\n            }}>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Color } from '../control/Types';\nimport '../styles/Button.scss';\nimport Icon from './Icon';\n\ninterface Props {\n    action?: () => void;\n    color?: Color;\n    margin?: string;\n    label: string;\n    icon?: string;\n}\n\nexport default function Button(props: Props) {\n    return (\n        <button \n            disabled={!props.action}\n            onClick={props.action}\n            className={`ui ${props.color ? props.color : 'blue'} button flex-centered-important`}\n            style={{margin: props.margin ? props.margin : '1em'}}\n        >\n            {props.icon && (<Icon icon={props.icon} />)} {props.label}\n        </button>\n    );\n}","import React from 'react';\nimport { ReportViewState } from '../control/States';\nimport PropertyGroup from './PropertyGroup';\nimport PropertyRow from './PropertyRow';\nimport { BrandIcon } from './BrandIcon';\nimport Button from './Button';\nimport { mapArchToReadable } from '../control/Types';\n\ninterface Props {\n    data: ReportViewState;\n    name: string;\n    id: number;\n\n    delete?: () => void;\n    view?: () => void;\n    download?: () => void;\n}\n\ninterface Display {\n    application?: JSX.Element;\n    build?: JSX.Element;\n    device?: JSX.Element;\n    processor?: JSX.Element;\n    runtime?: JSX.Element;\n    memory?: JSX.Element;\n    graphics?: JSX.Element;\n}\n\nexport default function Machine(props: Props) {\n    const machine = props.data.machine;\n\n    let machineInfo: Display = {};\n\n    if(machine)\n    {\n        const {\n            application,\n            build,\n            device,\n            extra,\n            processor,\n            runtime,\n            memory,\n        } = machine;\n        \n        const emitProperty = (prop: string, from: any, name?: string) => {\n            if(from[prop])\n                return (\n                <PropertyRow name={name ? name : prop}>\n                    {from[prop]}\n                </PropertyRow>);\n            else\n                return (<></>);\n        };\n\n        const args: JSX.Element[] = runtime.arguments ? runtime.arguments.map((arg, i) => {\n            return (<PropertyRow key={i} name={`arg[${i}]`}>{arg}</PropertyRow>);\n        }) : [];\n\n        const gpuInfo = extra && {\n            manufacturer: extra['gl:vendor'],\n            model: extra['gl:renderer'],\n            driver: extra['gl:driver'],\n\n            api: extra['graphics:library'],\n\n            context: extra['gl:version'],\n            shadercontext: extra['glsl:version'],\n\n            sdl2ver: extra['sdl2:version'],\n            windowing: extra['window:library'],\n        };\n        const deviceInfo = device && {\n            model: device.machineModel,\n            manufacturer: device.machineManufacturer,\n        };\n        const runtimeInfo = runtime && {\n            kernel: runtime.kernel && runtime.kernelVersion && \n                        runtime.kernel + ' ' + runtime.kernelVersion,\n            distro: runtime.distro && runtime.distroVersion && \n                        runtime.distro + ' ' + runtime.distroVersion,\n        };\n\n        if(!deviceInfo.model)\n            deviceInfo.manufacturer = device.name.split(' running ')[0];\n\n        if(!runtimeInfo.distro)\n            runtimeInfo.distro = device.name.split(' running ')[1];\n\n        machineInfo = {\n            application: application && (\n                <PropertyGroup icon='package' title='Application'>\n                    {emitProperty('name', application)}\n                    {emitProperty('organization', application, 'source')}\n                    {emitProperty('version', application)}\n                </PropertyGroup>\n            ),\n            build: build && (\n                <PropertyGroup key='build' icon='tool' title='Engine build'>\n                    {emitProperty('version', build, 'engine version')}\n                    {emitProperty('buildMode', build, 'mode')}\n                    <PropertyRow name='compiler'>\n                        {build.compiler} {' '}\n                        {build.compilerVersion !== '0.0.0'\n                            ? build.compilerVersion\n                            : ''}\n                    </PropertyRow>\n                    {build.target ? (\n                        <PropertyRow name='target kernel'>\n                            <>\n                                <BrandIcon basedOn={build.target} />\n                                {build.target}\n                            </>\n                        </PropertyRow>\n                    ) : <></>}\n                    {emitProperty('architecture', build, 'target architecture')}\n                </PropertyGroup>\n            ),\n            runtime: runtime && (\n                <PropertyGroup key='runtime' icon='terminal' title='Runtime Info'>\n                    {runtimeInfo.kernel ? (\n                        <PropertyRow name='kernel'>\n                            <>\n                                <BrandIcon basedOn={runtimeInfo.kernel} />\n                                {runtimeInfo.kernel}\n                            </>\n                        </PropertyRow>\n                    ) : <></>}\n                    {runtimeInfo.distro ? (\n                        <PropertyRow name='distro'>\n                            <>\n                                <BrandIcon basedOn={runtimeInfo.distro} />\n                                {runtimeInfo.distro}\n                            </>\n                        </PropertyRow>\n                    ) : <></>}\n                    {runtime.architecture ? (\n                        <PropertyRow name='architecture'>\n                            {mapArchToReadable(runtime.architecture)}\n                        </PropertyRow>\n                    ) : <></>}\n                    {emitProperty('cwd', runtime)}\n                    <>\n                        {args}\n                    </>\n                </PropertyGroup>\n            ),\n            device: device && (\n                <PropertyGroup icon='server' title='Device'>\n                    <PropertyRow name='device'>\n                        <>\n                            <BrandIcon basedOn={deviceInfo.manufacturer} />\n                            {deviceInfo.manufacturer} {deviceInfo.model}\n                        </>\n                    </PropertyRow>\n                    <PropertyRow name='motherboard'>\n                        {device.motherboard} {device.motherboardVersion}\n                    </PropertyRow>\n                    <PropertyRow name='dpi'>\n                        {device.dpi.toFixed(2)}\n                    </PropertyRow>\n                </PropertyGroup>\n            ),\n            processor: processor && (\n                <PropertyGroup icon='cpu' title='Processor'>\n                    <PropertyRow name='model'>\n                        <>\n                            <BrandIcon basedOn={processor.model} />\n                            {processor.model} ({processor.firmware})\n                        </>\n                    </PropertyRow>\n                    <PropertyRow name='layout'>\n                        {processor.cores + ''} cores, {processor.threads + ''} threads\n                    </PropertyRow>\n                    <>\n                        {memory && (\n                            <PropertyRow name='memory'>\n                                {Math.ceil(memory.bank / (1024 * 1024))\n                                + 'MB / '\n                                + Math.ceil(memory.bank / (1024 * 1024 * 1024))\n                                + 'GB'}\n                            </PropertyRow>\n                        )}\n                    </>\n                </PropertyGroup>\n            ),\n            graphics: gpuInfo && gpuInfo.model && (\n                <PropertyGroup icon='tv' title='Graphics'>\n                    <PropertyRow name='gpu'>\n                        <BrandIcon basedOn={gpuInfo.model} />\n                        {gpuInfo.model.startsWith(gpuInfo.manufacturer)\n                            ? '' \n                            : gpuInfo.manufacturer}\n                        {gpuInfo.model}\n                    </PropertyRow>\n                    {gpuInfo.driver && (\n                    <PropertyRow name='gpu driver'>\n                        {gpuInfo.driver}\n                    </PropertyRow>\n                    )}\n                    {gpuInfo.api && (\n                    <PropertyRow name='gpu api'>\n                        <BrandIcon basedOn={gpuInfo.api} />\n                        {gpuInfo.api}\n                    </PropertyRow>\n                    )}\n                    {gpuInfo.api && gpuInfo.api.startsWith('OpenGL') &&\n                        gpuInfo.context && gpuInfo.shadercontext && (\n                            <>\n                                <PropertyRow name='OpenGL ver'>\n                                    {gpuInfo.context}\n                                </PropertyRow>\n                                <PropertyRow name='OpenGL SL ver'>\n                                    {gpuInfo.shadercontext}\n                                </PropertyRow>\n                            </>\n                        )\n                    }\n                    {gpuInfo.windowing && (\n                    <PropertyRow name='windowing lib'>\n                        {gpuInfo.windowing}\n                    </PropertyRow>\n                    )}\n                </PropertyGroup>\n            ),\n        };\n    }\n\n    return (\n        <div>\n            <PropertyGroup icon='box' title='Basic Information'>\n                <PropertyRow name={`${props.name} ID`}>\n                    {props.id + ''}\n                </PropertyRow>\n                <PropertyRow name='submission time'>\n                    {props.data.submitTime.toString()}\n                </PropertyRow>\n            </PropertyGroup>\n            <PropertyGroup icon='edit' title='Actions'>\n                <>\n                {props.delete && (\n                    <Button\n                        label='Delete'\n                        color='red'\n                    />\n                )}\n                {props.view && (\n                    <Button\n                        label='View'\n                        icon='cloud'\n                        action={props.view}\n                    />\n                )}\n                {props.download && (\n                    <Button\n                        label='Download'\n                        icon='download'\n                        action={props.download}\n                    />\n                )}\n                </>\n            </PropertyGroup>\n            {machineInfo.application}\n            {machineInfo.build}\n            {machineInfo.runtime}\n            {machineInfo.device}\n            {machineInfo.processor}\n            {machineInfo.graphics}\n        </div>\n    );\n}\n","import React from 'react';\nimport { Stackframe } from '../control/Types';\nimport Code from './Code';\nimport PropertyGroup from './PropertyGroup';\n\ninterface Props {\n    data: Stackframe[];\n}\n\nexport default function Stacktrace(props: Props) {\n    const stackframes = props.data\n        .filter(frame => frame.frame !== undefined)\n        .map(frame => {\n            const type = frame.frame.startsWith('void ') ? '' : 'auto ';\n            const sigStart = frame.frame.indexOf('(');\n            const signature = (sigStart !== -1 ? frame.frame.substr(0, sigStart) : frame.frame) + '(...)';\n            const module = '<unknown module>';\n            const address = frame.ip.replace('0x0x', '0x');\n            const out = module + ' ' + address + ' ' + type + signature + '\\n';\n\n            return out;\n        });\n\n    return (\n        <PropertyGroup icon='file-text' title='Stacktrace'>\n            {stackframes.length > 0 ? (\n                <div\n                    className=\"ui segment left aligned inverted stack-segment\"\n                    style={{flexDirection: 'column'}}\n                >\n                    <Code language=\"cpp\">\n                        {stackframes}\n                    </Code>\n                </div>\n            ) : (\n                <p>No stacktrace available</p>\n            )}\n        </PropertyGroup>\n    );\n}\n","import React from 'react';\nimport Code from './Code';\n\ninterface Props {\n    data: string;\n}\n\nexport default function TextFileView(props: Props) {\n    return (\n        <div \n            className=\"ui segment left aligned inverted log-segment\"\n            style={{flexGrow: 1, margin: 0, padding: 0}}\n        >\n            <Code language=\"none\">\n                {props.data}\n            </Code>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { ReportOrCrashState } from '../control/States';\nimport Machine from './Machine';\nimport '../styles/ReportView.scss';\nimport Stacktrace from './Stacktrace';\nimport TextFileView from './TextFileView';\nimport PropertyGroup from './PropertyGroup';\nimport Icon from './Icon';\nimport { signalToString } from '../control/Types';\n\ninterface Props {\n    data: ReportOrCrashState;\n\n    tracerTemplate: string;\n    downloadUrl: string;\n}\n\nexport default function ReportView(props: Props) {\n    const [state, setState] = useState(props.data);\n    const [loadState, setLoadState] = useState(props.data.state);\n    const [displayState, setDisplayState] = useState<'collapsed' | 'shown'>('collapsed');\n\n    const dataType = state.type;\n\n    const expand = async () => {\n        if(displayState === 'collapsed')\n            setDisplayState('shown');\n        else\n            setDisplayState('collapsed');\n\n        if(loadState !== 'unloaded')\n            return;\n\n        setLoadState('loading');\n        state.expand(() => {\n            setLoadState('loaded');\n            setState(state);\n        });\n    };\n\n    let itemId = 0;\n    if(state.type === 'Crash') {\n        itemId = state.data.crashId;\n    } else if(state.type === 'Report') {\n        itemId = state.data.reportId;\n    }\n\n    return (\n        <>\n        <div onClick={expand} className='report-header'>\n            {dataType} - {state.type === 'Report' \n                ? state.data.system.split(' running')[0] \n                : signalToString(state.data.exitCode)}\n            <Icon icon=\"chevron-down\"/>\n        </div>\n        <div className={`report-view ${displayState}`} style={{position: 'relative'}}>\n            {displayState === 'shown' ?  (\n                <>\n                <Machine\n                    data={state.reportView}\n                    name={dataType}\n                    id={itemId}\n                    download={() => window.open(props.downloadUrl, '_blank')}\n                    view={() => \n                        window.open(props.tracerTemplate.replace(\n                            '{src}',\n                            props.downloadUrl))}\n                />\n                {loadState === 'loading' && (\n                    <div className=\"ui active loader\" style={{\n                        position: 'relative',\n                        height: '40px' }}>\n                    </div>\n                )}\n                { state.type === 'Crash' && state.stack ? (\n                        <Stacktrace data={state.stack} />\n                ) : <></>\n                }\n                {state.type === 'Crash' && (\n                    state.stdout.code === 200 || state.stderr.code === 200) \n                    && (\n                <PropertyGroup icon='' title='Logs'>\n                    { state.stdout.code === 200 ? (\n                            <TextFileView data={state.stdout.data} />\n                    ) : <></>\n                    }\n                    { state.stderr.code === 200 ? (\n                            <TextFileView data={state.stderr.data} />\n                    ) : <></>\n                    }\n                </PropertyGroup>\n                )}\n                </>\n            ) : (\n                <></>\n            )\n            }\n        </div>\n        </>\n    );\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Chart, ChartData, ChartType } from 'chart.js';\nimport { ScopedFetch } from '../control/Netcode';\nimport { Statistics } from '../control/Types';\n\ninterface Props {\n    net: ScopedFetch;\n    title: string;\n    source: string;\n    chartType: ChartType;\n    selector?: (e: any) => string;\n    normalizer?: (e: string) => string;\n};\n\nexport default function Graph(props: Props) {\n    const chartElement = useRef<HTMLCanvasElement>(null);\n    const [data, setData] = useState<ChartData>();\n    const [chart, setChart] = useState<Chart>();\n    const [total, setTotal] = useState<number>();\n\n    useEffect(() => {\n        (async () => {\n            const stats = await props.net.fetch<Statistics[]>(props.source);\n\n            if(!stats.data)\n                return;\n            \n            const labels = stats.data.map(e => {\n                if(e.architecture) return e.architecture;\n                if(e.system) return e.system;\n                if(e.item) return props.selector \n                    ? props.selector(e.item)\n                    : e.item;\n                return '[unknown]';\n            });\n\n            let normalizedValues = stats.data.map((e, i) => {\n                return {\n                    item: props.normalizer \n                        ? props.normalizer(labels[i]) : labels[i],\n                    count: e.count\n                };\n            });\n            const sortedValues: Map<string, number> = new Map<string, number>();\n            normalizedValues.forEach(e => sortedValues.set(\n                e.item,\n                (sortedValues.get(e.item) ? sortedValues.get(e.item)! : 0) \n                + e.count))\n            normalizedValues = [];\n            sortedValues.forEach((v, k) => normalizedValues.push(\n                {item: k, count: v}));\n\n            let newTotal = 0;\n\n            normalizedValues.forEach(e => {\n                newTotal += e.count;\n            });\n\n            setData({\n                labels: normalizedValues.map(e => e.item),\n                datasets: [\n                    {\n                        data: normalizedValues.map(e => e.count),\n                        label: 'Count',\n                    }\n                ]\n            });\n\n            setTotal(newTotal);\n        })();\n    }, []);\n\n    if(!chart && chartElement.current) {\n        const canvas = chartElement.current.getContext('2d');\n\n        if(canvas !== null && data) {\n            setChart(new Chart(canvas, {\n                data: data,\n                type: props.chartType,\n            }));\n        }\n    }\n\n    return (\n        <div className=\"ui raised card\">\n            <div className=\"image\">\n                <canvas style={{height: \"40em\"}} ref={chartElement}></canvas>\n            </div>\n            <div className=\"content\">\n                <p className=\"header\">{props.title}</p>\n                <div className=\"meta\">\n                    <span>{total} unique values</span>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { useState } from 'react';\n\ninterface Props {\n    size?: number;\n    tags?: string[];\n\n    action: (query: string, tags?: string[]) => Promise<void>;\n};\n\nexport default function SearchField(props: Props) {\n    const [current, setCurrent] = useState<string>('');\n\n    const onChange = (change: React.ChangeEvent<HTMLInputElement>) => {\n        if(current != change.target.value) {\n            setCurrent(change.target.value);\n            props.action(change.target.value, props.tags);\n        }\n    };\n\n    return (\n        <div\n            className={`ui inverted icon input ${props.tags && 'right labeled'}`}\n            style={{fontSize: props.size ? props.size + 'px' : '1.2em'}}\n        >\n            <input\n                type=\"text\"\n                placeholder=\"Search...\"\n                onInput={onChange}\n            />\n            <i className=\"search icon\"></i>\n            {/* {props.tags && props.tags.map(tag => \n                (<a className=\"ui tag label\">{tag}</a>))} */}\n        </div>\n    );\n};","import React, { useState, useEffect } from 'react';\nimport { DiagnosticState, DiagnosticData, reportFilter } from '../control/States';\nimport ReportView from '../components/ReportView';\nimport Code from '../components/Code';\nimport Graph from '../components/Graph';\nimport SearchField from '../components/SearchField';\n\ninterface Props {\n    data: DiagnosticState;\n}\n\nexport default function Diagnostics(props: Props) {\n    const [diagnostics, setDiagnostics] = useState<DiagnosticData>();\n    const [query, setQuery] = useState<string>();\n\n    props.data.propagateUpdate = (data: DiagnosticData) => {\n        setDiagnostics(data);\n    };\n    useEffect(() => {\n        props.data.triggerUpdate();\n    }, [props.data]);\n\n    const tracerTemplate = props.data.endpoints.trace + '?source={src}';\n\n    const crashList = diagnostics?.filteredCrashes || diagnostics?.crashes;\n    const reportList = diagnostics?.filteredReports ||  diagnostics?.reports;\n\n    const crashes = crashList?.map(crash => (\n        <ReportView\n            key={crash.data.crashId}\n            data={crash}\n            tracerTemplate={tracerTemplate}\n            downloadUrl={props.data.endpoints.data +\n                crash.links.filter(l => l.uri.endsWith('/profile'))[0].uri}\n        />\n    ));\n\n    const reports = reportList?.map(report => (\n        <ReportView\n            key={report.data.reportId}\n            data={report}\n            tracerTemplate={tracerTemplate}\n            downloadUrl={props.data.endpoints.data +\n                report.links.filter(l => l.uri.endsWith('/raw'))[0].uri}\n        />\n    ));\n\n    const onQueryUpdate = async (query: string) => {\n        console.log('query', query);\n        diagnostics!.filteredReports =\n            diagnostics?.reports.filter(reportFilter(query));\n        diagnostics!.filteredCrashes =\n            diagnostics?.crashes.filter(reportFilter(query));\n        setQuery(query);\n    };\n\n    const profilerUrl = diagnostics?.crashes[0]?.endpoints.profiler || 'https://coffee.birchy.dev';\n\n    const loader = (\n        <div className=\"ui active loader\" style={{height: '8em'}}></div>\n    );\n\n    return (\n        <div\n            data-tab='nav::diag' \n            className='ui inverted text tab segment'\n        >\n            An embedded profiler in the application allows collecting some statistics as well as system information. For typical *nix operating systems this is done by:\n\n            <Code language=\"bash\">\n                COFFEE_REPORT_URL={profilerUrl} &lt;program&gt;\n            </Code>\n\n            On Android it is possible by adding an extra value to the launch process:\n\n            <Code language=\"bash\">\n                adb shell am start\n                    -n &lt;com.package/.Activity&gt;\n                    --es COFFEE_REPORT_URL {profilerUrl}\n            </Code>\n\n            <div className=\"ui two cards\" style={{marginBottom: '4em'}}>\n                <Graph\n                    net={props.data.plain}\n                    title=\"Operating systems\"\n                    source=\"/v1/statistics/os\"\n                    chartType=\"doughnut\"\n                    normalizer={e => e.split(' (')[0]}\n                />\n                <Graph\n                    net={props.data.plain}\n                    title=\"Architectures\"\n                    source=\"/v1/statistics/arch\"\n                    chartType=\"doughnut\"\n                />\n                <Graph\n                    net={props.data.plain}\n                    title=\"Devices\"\n                    source=\"/v2/stats/devices\"\n                    chartType=\"doughnut\"\n                    selector={(e) => e['name']}\n                    normalizer={e => e.split(' running')[0]}\n                />\n                <Graph\n                    net={props.data.plain}\n                    title=\"Applications\"\n                    source=\"/v2/stats/applications\"\n                    chartType=\"doughnut\"\n                    selector={(e) => e['name']}\n                />\n            </div>\n\n            <SearchField \n                action={onQueryUpdate}\n            />\n\n            <div className=\"ui inverted top attached tabular menu\">\n                <a className=\"ui item active\" data-tab=\"diag::report\">\n                    Reports\n                </a>\n                <a className=\"ui item\" data-tab=\"diag::crash\">\n                    Crashes\n                </a>\n            </div>\n\n            <div\n                data-tab=\"diag::report\"\n                className=\"ui inverted bottom attached tab segment active\"\n            >\n                {reports ? reports.length === 0 \n                        ? (<p>No reports to display</p>) \n                        : reports \n                    : loader}\n            </div>\n            <div\n                data-tab=\"diag::crash\"\n                className=\"ui inverted bottom attached tab segment\"\n            >\n                {crashes ? crashes.length === 0 \n                        ? (<p>No crashes to display</p>) \n                        : crashes \n                    : loader}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport Icon from './Icon';\nimport '../styles/Footer.scss';\nimport { GithubRepository } from '../control/Types';\n\ninterface Props {\n    source: GithubRepository;\n}\n\nexport default function Footer(props: Props) {\n    return (\n        <div\n            className=\"ui inverted vertical footer segment centered flex-centered\"\n        >\n            <span>source can be found over at</span>\n            <a href={props.source.link} className=\"flex-centered\">\n                <Icon icon='github' rounded={true} />\n                <span>github</span>\n            </a>\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport './styles/global.css';\nimport './styles/Page.scss';\nimport NavBar from './components/NavBar';\nimport { seedTree, Yggdrasil } from './control/Yggdrasil';\nimport Home from './pages/Home';\nimport Examples from './pages/Examples';\nimport Diagnostics from './pages/Diagnostics';\nimport initSemanticTabsDirty, { initSemanticAccordionsDirty } from './components/SemanticTab';\nimport Footer from './components/Footer';\n\nfunction App() {\n  const [yggdrasil, setYggdrasil] = useState<Yggdrasil>();\n\n  if(!yggdrasil) {\n    setYggdrasil(seedTree({\n      data: \"https://api.birchy.dev\",\n      profiler: \"https://coffee.birchy.dev\",\n      crash: \"https://crash.birchy.dev\",\n      trace: 'https://trace.birchy.dev'\n    }, {\n      username: \"hbirchtree\",\n      link: \"https://github.com/hbirchtree\",\n      img: \"https://avatars3.githubusercontent.com/u/6828070?s=80&v=4\"\n    },\n    [\n      'hbirchtree/coffeecutie',\n      'hbirchtree/coffeecutie-imgui',\n      'hbirchtree/native-library-bundle',\n    ],\n    'hbirchtree/coffeecutie'));\n  }\n\n  const [nav, setNav] = useState('nav::home');\n\n  const stylesheets = [\n    'semantic/semantic.min.css',\n    'semantic/components/accordion.min.css',\n    'semantic/components/container.min.css',\n    'semantic/components/grid.min.css',\n    'semantic/components/header.min.css',\n    'semantic/components/menu.min.css',\n    'semantic/components/modal.min.css',\n    'semantic/components/tab.min.css',\n    'highlight/dracula.css',\n  ].map(style => (<link key={style} rel='stylesheet' href={style} />));\n\n  useEffect(() => initSemanticTabsDirty('.ui.menu .item'));\n  useEffect(() => initSemanticAccordionsDirty('.ui.accordion'));\n\n  return (\n    <div className=\"kafei\">\n      {stylesheets}\n      {yggdrasil ? (\n        <>\n          <NavBar\n            defaultItem={nav}\n            callback={setNav}\n            internalLinks={yggdrasil.menu.links}\n            externalLinks={yggdrasil.menu.externals}\n            login={yggdrasil.login}\n            profile={yggdrasil.profile}\n          />\n          <Home yggdrasil={yggdrasil} />\n          <Examples releases={{\n            info: yggdrasil.releases,\n            net: yggdrasil.diagnostics}}\n          />\n          <Diagnostics\n            data={yggdrasil.diagnostics}\n          />\n\n          <Footer source={{\n              link: 'https://github.com/hbirchtree/kafei-py'\n            }}\n          />\n      </>\n      ) : (\n        <div className=\"ui active loader\" style={{height: '40px'}}></div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","export default function initSemanticTabsDirty(selector) {\n    window.$(selector).tab();\n}\n\nexport function initSemanticAccordionsDirty(selector) {\n    window.$(selector).accordion();\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}